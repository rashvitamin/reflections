Lect 5:

Q. What happens when you initialize a repository? Why do you need to do it?

When you initialize a git repository by running git init, a hidden folder named ".git" which has all the version control
related meta data gets created. 

Initially, no commits are made on its own. You can view the same with git log and git status. git status give 
all the information about the files that are there and are affected/changed


Lect 8:

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is the intermidiate stage between the working directory and the repository. Staging Area provides the flexiblity of deciding which files are to be version controlled in a particular commit. git add "filename" adds the file to the staging area and the git reset "filename" removes the file from the staging area.


Lect 13

Q. How can you use the staging area to make sure you have one commit per logical change?

By using the git add "filename"; I can have control of the number of files or which file is getting added in the staging area. So, by having this control of which file being in the staging area - I can make one commit per logical change.


Lect 16 ;

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful in the following cases -
1. Experimental Features
2. New Versions or Builds or something exploratory
3. Specific builds or version based on localication etc
4. Any situation where in you need to have a demo version and development version seperate


Lect 21 :

Q. How do the diagrams help you visualize the branch structure?

The diagrams help to understand the parents of the commit. Each commit has a parents. So, by know the details of the parent of the commit, the git log is able to find the trail and reachability.

It provides us the information about which branches or/and commits are reachable and which are not.


Lect 26 :

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches is a combination of files/features together. Its like - we add a feature to the main code.

By representing the branches and commit nodes by diagram, we have a reference of the parent of the commit and the reachability of a branch.





